#!/usr/bin/env sh

# arq-preflight-mirror - Maintain a directory of hard-linked mirrors
#
# For a usage summary, run `arq-preflight-mirror -h`.
#
# Written in 2019 by Lawrence Vel√°zquez <vq@larryv.me>.
#
# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide. This software is distributed without any
# warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication
# along with this software. If not, see
# <https://creativecommons.org/publicdomain/zero/1.0/>.


readonly E_USAGE=1
readonly E_SRCS_UNUSABLE=2
readonly E_DST_UNUSABLE=3
readonly E_CP_UNUSABLE=4
readonly E_RSYNC_UNUSABLE=5
readonly E_CACHE_CMP=6
readonly E_CACHE_COPY=7
readonly E_DST_PURGE=8
readonly E_MIRROR_COPY=9
readonly E_MIRROR_PRUNE=10


# Read source paths from standard input and add them to the given
# directory. The hierarchies implied by the source paths are replicated
# under the directory (e.g., /foo/bar/baz -> /backup/dir/foo/bar/baz).
add_to_mirror() {
    # Use `--preserve=ownership,timestamps` instead of `--archive` to
    # drop directories' ACLs (while preserving modes). This prevents
    # "deny delete" ACLs from breaking subsequent purge and prune steps,
    # as Arq runs preflight/postflight scripts without privileges.
    tr -s ${USE_LF_DELIM+'\n'} '\0' | xargs -0J % -- "$CP" --force --link \
        --no-dereference --parents --preserve=ownership,timestamps \
        --recursive ${VERBOSE+--verbose} -- % "$1"
}


# Print arguments to standard error.
err() {
    for msg; do
        printf '%s: %s\n' "${0##*/}" "$msg" >&2
    done
}


# Parse command-line arguments and configure the program accordingly.
init() {
    unset SHOW_USAGE VERBOSE
    USE_LF_DELIM=yes
    OPTIND=1
    while getopts 0hv opt; do
        case $opt in
            0) unset USE_LF_DELIM ;;
            h) SHOW_USAGE=yes; return ;;
            v) VERBOSE=yes ;;
            *) return $E_USAGE ;;
        esac
    done
    readonly SHOW_USAGE USE_LF_DELIM VERBOSE

    : "${CP:=cp}" "${RSYNC:=rsync}"

    shift $((OPTIND - 1))
    [ $# -eq 2 ] || { err 'Exactly 2 arguments required'; return $E_USAGE; }
    case $1 in -*) SRCS=./$1 ;; *) SRCS=$1 ;; esac
    case $2 in -*) DST=./$2 ;; *) DST=$2 ;; esac
    readonly DST SRCS
}


# Prune the given directory based on the contents of the sources, which
# are read from standard input. The directory should have been populated
# by an earlier call to add_to_mirror. BUG: This does not prune outside
# of the mirrored directory trees.
prune_mirror() {
    tr -s ${USE_LF_DELIM+'\n'} '\0' | xargs -0J % -- "$RSYNC" --delete \
        --ignore-existing --ignore-non-existing --recursive --relative \
        ${VERBOSE+--verbose} -- % "$1"
}


# Delete everything in $DST and make a fresh copy of $SRCS.
purge_mirror() {
    verbose_msg 'Source list has changed, purging DST...'
    # Invoke rm(1) via find(1) to avoid ARG_MAX problems [2].
    find "$DST" ! -path "$DST" -prune -exec rm -fR {} + || return $E_DST_PURGE
    verbose_msg "Caching SRCS: $CACHED_SRCS"
    (umask a-w && cp "$SRCS" "$CACHED_SRCS") || return $E_CACHE_COPY
}


# Print a usage message to standard output.
show_usage() {
    cat <<EOF
usage: ${0##*/} [-0hv] sources_file destination_dir

The files and directories listed in sources_file are mirrored to
destination_dir under their full paths (e.g., '/foo/bar/baz' becomes
'/backup/dir/foo/bar/baz'). Directories are handled recursively. Items
in destination_dir that no longer exist under their corresponding source
path are deleted.

Files are hard-linked to save disk space, so the sources must be on the
same device as destination_dir. Directory modes are preserved but ACLs
are not.

The current implementation uses GNU cp(1), which is not included with
macOS. Once installed from elsewhere, its path can be specified in the
CP environment variable.

Options:
  -0    delimit paths in sources_file with NUL instead of the default LF
  -h    display this usage message and exit
  -v    print extra status messages to standard output

See <https://github.com/larryv/arq-helpers> for more information.
EOF
}


# Perform basic sanity checks on important paths.
validate_paths() {
    [ -f "$SRCS" ] \
        || { err "Not a file: $SRCS"; return $E_SRCS_UNUSABLE; }
    [ -r "$SRCS" ] \
        || { err "Read permission denied: $SRCS"; return $E_SRCS_UNUSABLE; }
    [ -d "$DST" ] \
        || { err "Not a directory: $DST"; return $E_DST_UNUSABLE; }
    [ -r "$DST" ] \
        || { err "Read permission denied: $DST"; return $E_DST_UNUSABLE; }
    [ -w "$DST" ] \
        || { err "Write permission denied: $DST"; return $E_DST_UNUSABLE; }
    command -v -- "$CP" >/dev/null \
        || { err "Command not found: $CP"; return $E_CP_UNUSABLE; }
    command -v -- "$RSYNC" >/dev/null \
        || { err "Command not found: $RSYNC"; return $E_RSYNC_UNUSABLE; }
}


# Print arguments to standard output if program is in verbose mode.
verbose_msg() {
    if [ -n "${VERBOSE+isset}" ]; then
        printf '%s\n' "$@"
    fi
}


main() {
    # Initialize program state.
    init "$@" || { status=$?; show_usage >&2; return $status; }

    # Give the -h option highest precedence.
    [ -n "${SHOW_USAGE+isset}" ] && { show_usage; return 0; }

    # Summarize program configuration.
    verbose_msg "CP: $CP" "RSYNC: $RSYNC"
    if [ -n "${USE_LF_DELIM+isset}" ]; then
        verbose_msg "SRCS (LF-delimited): $SRCS"
    else
        verbose_msg "SRCS (NUL-delimited): $SRCS"
    fi
    verbose_msg "DST: $DST"

    # This isn't strictly necessary, but otherwise there's a code path
    # in mirror() wherein the destination is purged before anything else
    # verifies that the sources file is usable.
    validate_paths || return

    case $DST in
        */) readonly CACHED_SRCS="$DST${SRCS##*/}.cached" ;;
        *) readonly CACHED_SRCS="$DST/${SRCS##*/}.cached" ;;

    # Files in the destination may become orphaned if paths are removed
    # from the sources file. Instead of searching for such files with
    # care, purge the destination completely if the sources file has
    # changed at all. (This mess preserves cmp(1) error messages [1].)
    msg=$({ [ -f "$CACHED_SRCS" ] && cmp "$CACHED_SRCS" "$SRCS"; } \
        2>&1 >/dev/null)
    case $? in
        0) ;;
        1) purge_mirror || return ;;
        *) err "$msg"; return $E_CACHE_CMP ;;
    esac

    verbose_msg 'Adding new files...'
    add_to_mirror "$DST" <"$CACHED_SRCS" || return $E_MIRROR_COPY

    verbose_msg 'Pruning extraneous files...'
    prune_mirror "$DST" <"$CACHED_SRCS" || return $E_MIRROR_PRUNE
}


main "$@"


# References
#    1. https://pubs.opengroup.org/onlinepubs/9699919799/utilities/cmp.html#tag_20_20_16
#    2. https://www.in-ulm.de/~mascheck/various/argmax
